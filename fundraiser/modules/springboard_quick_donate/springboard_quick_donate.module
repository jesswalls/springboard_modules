<?php
/**
 * @file
 * Module file for springboard_quick_donate.
 */

define('SPRINGBOARD_QUICK_DONATE_UID_NOT_EQUAL_TOKEN', 0);

/**
 * Implements hook_menu().
 */
function springboard_quick_donate_menu() {
  $items = array();

  $items['admin/config/system/fundraiser/quick-donate/token-generator'] = array(
    'title' => 'Quick Donate Token Generator',
    'description' => 'Generate quick donate HMAC tokens for testing or use',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_quick_donate_token_generator'),
    'access arguments' => array('administer fundraiser quick_donate'),
    'file' => 'includes/springboard_quick_donate.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Create HMAC token link for quick donations.
 *
 * @param array $payload
 *   The payload values.
 *
 * @return string
 *   The quick donation url.
 */
function springboard_quick_donate_create_link($payload, $rollback = FALSE) {
  $link = '';
  $amount = $payload['amount'];

  $time = time() + (60 * 60 * 24 * 30);
  $values = array(
    $payload['uid'],
    $time,
    'qd',
    $amount,
    $payload['did'],
    $payload['nid'],
  );

  $payload_string = implode('.', $values);

  $payload_string = base64_encode($payload_string);
  $key = springboard_hmac_get_key();
  $hmac = springboard_hmac_create_hmac($values, $key);

  $link = url('hmac/' . $payload_string . '/' . $hmac, array('absolute' => TRUE));

  return $link;
}

/**
 * Implements hook_springboard_hmac_allowed_actions().
 */
function springboard_quick_donate_springboard_hmac_allowed_actions_alter(&$actions) {
  $actions[] = 'qd';
}

/**
 * Implements hook_springboard_hmac_success().
 *
 * Redirect to the donation form if hmac validated.
 */
function springboard_quick_donate_springboard_hmac_success($payload) {
  if ($payload['action'] == 'qd') {
    $status = TRUE;
    $mapping = _springboard_quick_donate_hmac_mapping();
    // Need to do some more validation at this point since we don't want to show
    // an access denied message.
    if (!user_is_logged_in()) {
      $cookie = springboard_cookie_get_cookie();
      if (isset($cookie['uid']) && $cookie['uid'] != $payload[$mapping['uid']]) {
        // Set a flag to tell us later that uid authentication failed, so we can
        // set an appropriate message on the donation form.
        $_SESSION['springboard_hmac']['quickdonate'] = array(
          'status' => FALSE,
          'reason' => SPRINGBOARD_QUICK_DONATE_UID_NOT_EQUAL_TOKEN,
        );
        $status = FALSE;
      }
    }

    // Move quickdonate values into their own array for our own sanity.
    if ($status) {
      foreach ($mapping as $key) {
        $_SESSION['springboard_hmac']['quickdonate'][$key] = $payload[$key];
        unset($_SESSION['springboard_hmac'][$key]);
      }
    }

    if (isset($payload[2]) && is_numeric($payload[2])) {
      $node = node_load($payload[2]);
      if (!empty($node->type) && fundraiser_is_donation_type($node->type)) {
        drupal_goto('node/' . $node->nid);
      }
    }
  }
}

/**
 * Implements hook_springboard_hmac_failure().
 *
 * Redirect to the donation form if hmac not validated.
 */
function springboard_quick_donate_springboard_hmac_failure($reason, $payload) {
  $mapping = _springboard_quick_donate_hmac_mapping();

  // If the Springboard cookie is set and matches the uid from the token,
  // redirect user to donation form. This scenario is treated as a success
  // condition.
  $cookie = springboard_cookie_get_cookie();
  if (!empty($cookie['uid']) && $cookie['uid'] == $payload[$mapping['uid']]) {
    drupal_goto(drupal_get_path_alias('node/' . $payload[$mapping['fundraiser_id']]));
  }

  // Otherwise this is a failure condition. Output the reason if configured to
  // do so.
  if (variable_get('springboard_quick_donate_debug', FALSE)) {
    global $user;
    if (module_exists('devel') && user_access('access devel information', $user)) {
      dpm($reason);
    }
    else {
      drupal_set_message($reason, 'warning', FALSE);
    }
  }

  // Redirect to the login form.
  drupal_session_start();
  $_SESSION['quickdonate'] = TRUE;

  $nid = $payload[$mapping['fundraiser_id']];
  drupal_goto('/user', array(
    'query' => array(
      'destination' => drupal_get_path_alias('node/' . $nid),
    ),
  ));
}

/**
 * Implements hook_FORM_ID_alter().
 *
 * Used to add a quick donation related message.
 */
function springboard_quick_donate_form_user_login_alter(&$form, &$form_state) {
  drupal_session_start();
  $destination = drupal_get_destination();
  if (isset($_SESSION['quickdonate']) && $_SESSION['quickdonate'] && !empty($destination)) {
    $destination = $destination['destination'];
    $form['#prefix'] = t("Please login to verify your identity. Or if you'd prefer, you may !proceed.", array(
      '!proceed' => l(t('proceed to the full donation form'), $destination),
    ));
  }
}

/**
 * Helper function to get a mapping of hmac values for quick donations.
 *
 * @return array
 *   A map of hmac types to their corresponding keys.
 */
function _springboard_quick_donate_hmac_mapping() {
  return array(
    'amount' => 0,
    'donation_id' => 1,
    'uid' => 'uid',
    'fundraiser_id' => 2,
  );
}

/**
 * Implements hook_springboard_hmac_verify_payload().
 */
function springboard_quick_donate_springboard_hmac_verify_payload($payload) {
  $qd_hmac_mapping = _springboard_quick_donate_hmac_mapping();
  $did = $payload[$qd_hmac_mapping['donation_id']];
  if ($did > 0) {
    $donation = fundraiser_donation_get_donation($did);
    $node = $donation->node;
  }
  else {
    $nid = $payload[$qd_hmac_mapping['fundraiser_id']];
    $node = node_load($nid);
  }

  if (!fundraiser_is_donation_type($node->type)) {
    return t('Not a valid node type.');
  }

  if (empty($node->gateways)) {
    return t('No gateway information available.');
  }

  if (empty($donation->gateway['payment_method'])) {
    return t('No payment information available.');
  }

  $payment_method = $donation->gateway['payment_method'][0];
  if (!array_key_exists($payment_method, $node->gateways) || !$node->gateways[$payment_method]['status'] || $donation->gateway['id'] !== $node->gateways[$payment_method]['id']) {
    return t('The payment method is not available for the specified node.');
  }

  return NULL;
}

/**
 * Implements hook_form_alter().
 */
function springboard_quick_donate_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#node']->type) && fundraiser_is_donation_type($form['#node']->type)) {
    // If this is an appropriate node edit/add form, add the "quick donation"
    // checkbox to the "Payment methods" fieldset.
    if (!empty($form['#node']->gateways)) {
      $form['payment_methods']['quickdonate'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable quick donations on this form?'),
        '#description' => t('When enabled, the "quick donation" option will be offered to users, which saves their payment information for faster payments in the future.'),
        '#default_value' => isset($form['#node']->quickdonate) ? $form['#node']->quickdonate : FALSE,
      );

      $usable_paypment_processors = array('credit' => array(), 'bank' => array());
      if (!empty($form['payment_methods']['gateways']['credit'])) {
        foreach ($form['payment_methods']['gateways']['credit']['id']['#options'] as $gateway => $value) {
          // Check to see if the currently selected payment method is Card on
          // File enabled (via the cardonfile boolean in its info array).
          $payment_method = commerce_payment_method_instance_load($gateway);

          // Skip if payment method is not capable of card on file.
          if (!_commerce_cardonfile_capable_payment_method_check($payment_method)) {
            continue;
          }

          // For onsite payment methods add a checkbox to the credit card
          // details container to store the credit card for future use.
          if (!$payment_method['offsite']) {
            $usable_paypment_processors['credit'][] = $gateway;
          }
        }
      }

      if (!empty($form['payment_methods']['gateways']['bank account'])) {
        foreach ($form['payment_methods']['gateways']['bank account']['id']['#options'] as $gateway => $value) {
          // Check to see if the currently selected payment method is Card on
          // File enabled (via the cardonfile boolean in its info array).
          $payment_method = commerce_payment_method_instance_load($gateway);

          // Skip if payment method is not capable of card on file.
          if (!_commerce_cardonfile_capable_payment_method_check($payment_method)) {
            continue;
          }

          // For onsite payment methods add a checkbox to the credit card
          // details container to store the credit card for future use.
          if (!$payment_method['offsite']) {
            $usable_paypment_processors['bank'][] = $gateway;
          }
        }
      }

      if (empty($usable_paypment_processors['credit']) && empty($usable_paypment_processors['bank'])) {
        // If no usable payment processors are available, disable the checkbox
        // and display a note to the user.
        $form['payment_methods']['quickdonate']['#attributes']['disabled'] = TRUE;
        $form['payment_methods']['quickdonate']['#suffix'] = '<span class="note"><strong>Note:</strong> no usable payment processors were found, so quick donations will not be available.</span>';
      }
      else {
        drupal_add_js(array(
          'springboard_quick_donate' => array(
            'usable_paypment_processors' => $usable_paypment_processors,
          ),
        ), 'setting');
        $form['payment_methods']['quickdonate_optin_message'] = array(
          '#type' => 'textfield',
          '#title' => t('"Quick Donation" opt-in text'),
          '#description' => t('This is the title of the opt-in checkbox. The "@type" placeholder can be used to specify the type of payment method (either credit card or bank account). Defaults to "Save this @type for future use".'),
          '#default_value' => isset($form['#node']->quickdonate_optin_message) ? $form['#node']->quickdonate_optin_message : variable_get('springboard_quick_donate_default_optin_message', t('Save this @type for future use')),
          '#states' => array(
            'visible' => array(
              ':input[name="quickdonate"]' => array('checked' => TRUE),
            ),
          ),
        );

        // Because a bug exists in D7 where the input filter help information
        // doesn't respect the '#states' property, we need to wrap the message
        // in a container and apply the #states property to the container
        // instead.
        // See https://www.drupal.org/node/997826 for more info.
        $form['payment_methods']['quickdonate_help_container'] = array(
          '#type' => 'container',
          '#states' => array(
            'visible' => array(
              ':input[name="quickdonate"]' => array('checked' => TRUE),
            ),
          ),
        );
        $form['payment_methods']['quickdonate_help_container']['quickdonate_help_message'] = array(
          '#type' => 'text_format',
          '#title' => t('"Quick Donation" help text'),
          '#description' => t('This message will be shown to users to provide information about quick donations. Use !type to print the type of payment method, which will be either credit or bank account.<br/><br/>', array('!type' => '<strong>@type</strong>')),
          '#default_value' => isset($form['#node']->quickdonate_help_message) ? $form['#node']->quickdonate_help_message : variable_get('springboard_quick_donate_default_help_message', t('Save your @type details and donate faster next time. We may email you from time to time with quick donate opportunities. You can update your @type details or cancel your enrollment at any time.')),
          '#format' => isset($form['#node']->quickdonate_help_message_format) ? $form['#node']->quickdonate_help_message_format : 'plain_text',
        );

        $form['payment_methods']['quickdonate_login_message'] = array(
          '#type' => 'textfield',
          '#title' => t('"Quick Donation" login text'),
          '#description' => t('This is the title of the log-in checkbox. The "@type" placeholder can be used to specify the type of payment method (credit card or bank account). Defaults to "Already have a saved @type?".'),
          '#default_value' => isset($form['#node']->quickdonate_login_message) ? $form['#node']->quickdonate_login_message : variable_get('springboard_quick_donate_default_login_message', t('Already have a saved @type?')),
          '#states' => array(
            'visible' => array(
              ':input[name="quickdonate"]' => array('checked' => TRUE),
            ),
          ),
        );

        $form['payment_methods']['quickdonate_login_link_message'] = array(
          '#type' => 'textfield',
          '#title' => t('"Quick Donation" login link text'),
          '#description' => t('This is the title of the log-in checkbox. Defaults to "Click here to login".'),
          '#default_value' => isset($form['#node']->quickdonate_login_link_message) ? $form['#node']->quickdonate_login_link_message : variable_get('springboard_quick_donate_default_login_link_message', t('Click here to login')),
          '#states' => array(
            'visible' => array(
              ':input[name="quickdonate"]' => array('checked' => TRUE),
            ),
          ),
        );
      }

      $form['#submit'][] = '_springboard_quick_donate_node_form_submit';
      $form['#attached']['js'][] = drupal_get_path('module', 'springboard_quick_donate') . '/js/springboard_quick_donate.js';
    }
  }
}

/**
 * Submission handler for node forms.
 *
 * Restructures array before it's passed to hook insert/update functions.
 */
function _springboard_quick_donate_node_form_submit($form, &$form_state) {
  $fields = array(
    'fundraiser_nid' => $form['#node']->nid,
    'quickdonate_optin_message' => $form_state['values']['quickdonate_optin_message'],
    'quickdonate_help_message_format' => $form_state['values']['quickdonate_help_message']['format'],
    'quickdonate_help_message' => $form_state['values']['quickdonate_help_message']['value'],
    'quickdonate_login_message' => $form_state['values']['quickdonate_login_message'],
    'quickdonate_login_link_message' => $form_state['values']['quickdonate_login_link_message'],
  );

  db_merge('fundraiser_springboard_quick_donate')
    ->key(array('fundraiser_nid' => $fields['fundraiser_nid']))
    ->fields($fields)
    ->execute();
}

/**
 * Implements hook_node_load().
 */
function springboard_quick_donate_node_load($nodes, $types) {
  $fundraiser_types = fundraiser_get_donation_types();
  $fundraiser_types = array_filter($fundraiser_types);
  $fundraiser_types = array_keys($fundraiser_types);
  if (!array_intersect($fundraiser_types, $types)) {
    return;
  }

  foreach ($nodes as $nid => $node) {
    _springboard_quick_donate_attach_quick_donate_fields($nodes[$nid]);
  }
}

/**
 * Implements hook_node_prepare().
 */
function springboard_quick_donate_node_prepare($node) {
  if (!fundraiser_is_donation_type($node->type)) {
    return;
  }

  _springboard_quick_donate_attach_quick_donate_fields($node);
}

/**
 * Helper function to attach quick donation settings to a node.
 *
 * @param object $node
 *   The node object.
 *
 * @return object
 *   The modified node object.
 */
function _springboard_quick_donate_attach_quick_donate_fields(stdClass $node) {
  $query = db_select('fundraiser_springboard_quick_donate', 'sqd')
    ->fields('sqd', array(
      'quickdonate_optin_message',
      'quickdonate_help_message_format',
      'quickdonate_help_message',
      'quickdonate_login_message',
      'quickdonate_login_link_message',
    ))
    ->condition('fundraiser_nid', $node->nid, '=')
    ->execute();

  if (!$query->rowCount()) {
    return $node;
  }

  $results = $query->fetchAssoc();
  foreach ($results as $key => $result) {
    $node->{$key} = $result;
  }
  $node->quickdonate = TRUE;
  return $node;
}

/**
 * Implements hook_fundraiser_field_info().
 */
function springboard_quick_donate_fundraiser_field_info_alter(&$fields) {
  $fields['payment_information']['quick_donate'] = array(
    '#type' => 'checkbox',
    '#title' => variable_get('springboard_quick_donate_default_optin_message', t('Save this card for future use')),
  );
  return $fields;
}

/**
 * Implements hook_fundraiser_donation_form().
 *
 * Adds "quick pay"-related fields to the form.
 */
function springboard_quick_donate_fundraiser_donation_form($form, $form_state) {
  // Exit if this isn't the right node type.
  if (empty($form['#node']->type) || !fundraiser_is_donation_type($form['#node']->type)) {
    return;
  }

  // Exit if the quick donation option isn't enabled on this form.
  if (empty($form['#node']->quickdonate) || !$form['#node']->quickdonate) {
    return;
  }

  // Exit if no payment method instance id.
  if (empty($form['#node']->gateways)) {
    return;
  }

  $mapping = _springboard_quick_donate_hmac_mapping();
  global $user;

  if (!empty($_SESSION['springboard_hmac']['quickdonate'])) {
    if (!empty($_SESSION['springboard_hmac']['quickdonate']['status']) && !$_SESSION['springboard_hmac']['quickdonate']['status']) {
      $reasons = array(
        SPRINGBOARD_QUICK_DONATE_UID_NOT_EQUAL_TOKEN => t("Uh oh. It looks like we weren't able to verify your saved payment details. Please !login to access your stored card information, or complete the donation form below.", array(
          '!login' => l(t('login'), '/user', array(
            'query' => array(
              'destination' => current_path(),
            ),
          )),
        )),
      );
      $form['#prefix'] = $reasons[$_SESSION['springboard_hmac']['quickdonate']['reason']];
    }
    else {
      // Load the $user variable based on uid from HMAC token.
      $user = user_load($_SESSION['springboard_hmac']['quickdonate'][$mapping['uid']]);

      // Go back and update form elements.
      $donor_info = &$form['submitted']['donor_information'];
      if (isset($user->sbp_first_name[LANGUAGE_NONE][0]['value'])) {
        $donor_info['first_name']['#default_value'] = $user->sbp_first_name[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->sbp_last_name[LANGUAGE_NONE][0]['value'])) {
        $donor_info['last_name']['#default_value'] = $user->sbp_last_name[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->mail)) {
        $donor_info['mail']['#default_value'] = $user->mail;
      }

      $billing_info = &$form['submitted']['billing_information'];
      if (isset($user->sbp_address[LANGUAGE_NONE][0]['value'])) {
        $billing_info['address']['#default_value'] = $user->sbp_address[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->sbp_address_line_2[LANGUAGE_NONE][0]['value'])) {
        $billing_info['address_line_2']['#default_value'] = $user->sbp_address_line_2[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->sbp_city[LANGUAGE_NONE][0]['value'])) {
        $billing_info['city']['#default_value'] = $user->sbp_city[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->sbp_state[LANGUAGE_NONE][0]['value'])) {
        $billing_info['state']['#default_value'] = $user->sbp_state[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->sbp_country[LANGUAGE_NONE][0]['value'])) {
        $billing_info['country']['#default_value'] = $user->sbp_country[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->sbp_zip[LANGUAGE_NONE][0]['value'])) {
        $billing_info['zip']['#default_value'] = $user->sbp_zip[LANGUAGE_NONE][0]['value'];
      }
    }
  }

  foreach ($form['#node']->gateways as $gateway_type => $gateway) {
    if (empty($gateway['status']) || empty($gateway['id'])) {
      continue;
    }

    // Extract payment method instance id.
    $instance_id = $gateway['id'];

    // Check to see if the currently selected payment method is Card on File
    // enabled (via the cardonfile boolean in its info array).
    $payment_method = commerce_payment_method_instance_load($instance_id);

    // Skip if payment method is not capable of card on file.
    if (!_commerce_cardonfile_capable_payment_method_check($payment_method)) {
      continue;
    }

    $type = 'card';
    if ($gateway_type == 'bank account') {
      // @todo What should this be?
      $type = 'bank account';
    }

    $form['submitted']['payment_information']['payment_fields'][$gateway_type]['cardonfile_store'] = array(
      '#type' => 'checkbox',
      '#title' => isset($form['#node']->quickdonate_optin_message) ? format_string($form['#node']->quickdonate_optin_message, array('@type' => $type)) : format_string(variable_get('springboard_quick_donate_default_optin_message', 'Save this @type for future use?'), array('@type' => $type)),
      '#default_value' => FALSE,
      '#description' => isset($form['#node']->quickdonate_help_message) ? check_markup(format_string($form['#node']->quickdonate_help_message, array('@type' => $type)), $form['#node']->quickdonate_help_message_format) : format_string(variable_get('springboard_quick_donate_default_help_message', 'Save your @type details and donate faster next time. We may email you from time to time with quick donate opportunities. You can update your @type details or cancel your enrollment at any time.'), array('@type' => $type)),
    );

    // Load existing active cards for the payment method instance and user.
    $stored_cards = commerce_cardonfile_load_multiple_by_uid($user->uid, $payment_method['instance_id']);

    // The ID of the cardonfile record specified for quick donations.
    $quick_donate_card = springboard_quick_donate_get_payment_info_for_uid($user->uid);

    // Build options form.
    $cardonfile_options_form = array();
    $instance_default_card_id = NULL;

    // If have stored cards ...
    if (!empty($stored_cards)) {
      _springboard_quick_donate_checkout_form_hide_payment_fields($form['submitted']['payment_information']['payment_fields'][$gateway_type]);

      $valid_cards = array_filter($stored_cards, 'commerce_cardonfile_validate_card_expiration');

      // If have un-expired cards ...
      if (!empty($valid_cards)) {
        // Get options list with labels.
        $card_option_element_type = variable_get('commerce_cardonfile_selector', 'radios');
        $card_options = commerce_cardonfile_element_options_list($valid_cards, $card_option_element_type);

        // Determine default option.
        $card_options_default_value = key($card_options);
        foreach (array_keys($card_options) as $card_id) {
          if (isset($valid_cards[$card_id]) &&
            // If this card is the quick donate card.
            ($quick_donate_card && $quick_donate_card == $card_id)
            // Or if the quick donate card wasn't set and this is the default
            // cardonfile card.
            || (!$quick_donate_card && !empty($valid_cards[$card_id]->instance_default))
          ) {
            $card_options_default_value = $instance_default_card_id = $card_id;

            // Move instance default to the top of the list.
            $card_option_label = $card_options[$card_id];
            unset($card_options[$card_id]);
            $card_options = array($card_id => $card_option_label) + $card_options;
            break;
          }
        }

        // Create options element.
        $cardonfile_options_form = array(
          '#type' => $card_option_element_type,
          '#title' => t('Select a stored card'),
          '#options' => $card_options,
          '#default_value' => $card_options_default_value,
          '#weight' => -10,
        );
      }
    }

    // If the quick donation cardonfile ID returned was FALSE, set it to the
    // default instance.
    if (!$quick_donate_card) {
      $quick_donate_card = $instance_default_card_id;
    }

    // Update form with options.
    if (!empty($cardonfile_options_form)) {
      $form['submitted']['payment_information']['payment_fields'][$gateway_type]['cardonfile'] = $cardonfile_options_form;

      // Add the CSS to hide a sole credit card icon if specified.
      if (variable_get('commerce_cardonfile_hide_cc_radio_button', TRUE)) {
        if (count($form['submitted']['payment_information']['payment_method']['#options']) == 1) {
          $form['submitted']['payment_information']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_cardonfile') . '/theme/commerce_cardonfile.checkout.css';
        }
      }

      // If the current value for the card selection element is not to use
      // a different credit card, then hide the credit card form elements.
      if (empty($form_state['values']['submitted_tree']['payment_information']['payment_fields'][$gateway_type]['cardonfile']) || $form_state['values']['commerce_payment']['payment_details']['cardonfile'] !== 'new') {
        $form['submitted']['payment_information']['payment_fields'][$gateway_type]['credit_card']['#access'] = FALSE;
      }
    }
    else {
      $form['submitted']['payment_information']['payment_fields'][$gateway_type]['cardonfile'] = array(
        '#type' => 'value',
        '#value' => 'new',
      );
    }

    // Add mark as default element.
    $instance_default_default_value = 0;
    if (!empty($instance_default_card_id)) {
      if (empty($form_state['values']['submitted_tree']) ||
        (!empty($form_state['values']['submitted_tree']['payment_information']['payment_fields'][$gateway_type]['cardonfile']) &&
        $form_state['values']['submitted_tree']['payment_information']['payment_fields'][$gateway_type]['cardonfile'] == $instance_default_card_id)) {
        $instance_default_default_value = 1;
      }
    }

    $force_instance_default = empty($stored_cards);
    $form['submitted']['payment_information']['payment_fields'][$gateway_type]['cardonfile_instance_default'] = array(
      '#type' => 'checkbox',
      '#title' => t('Set as your default payment method for all future donations?'),
      '#default_value' => $instance_default_default_value || $force_instance_default,
      '#disabled' => $force_instance_default,
      '#states' => array(
        'visible' => array(
          ':input[name$="[' . $gateway_type . '][cardonfile]"]' => array('value' => 'new'),
          ':input[name$="[' . $gateway_type . '][cardonfile_store]"]' => array('checked' => TRUE),
        ),
      ),
    );

    if (!user_is_logged_in()) {
      $login_text = isset($form['#node']->quickdonate_login_message) ? $form['#node']->quickdonate_login_message : variable_get('springboard_quick_donate_default_login_message', t('Already have a saved @type?'));
      $login_link_text = isset($form['#node']->quickdonate_login_link_message) ? $form['#node']->quickdonate_login_link_message : variable_get('springboard_quick_donate_default_login_link_message', t('Click here to login'));
      $form['submitted']['payment_information']['payment_fields'][$gateway_type]['cardonfile_store']['#suffix'] = format_string($login_text, array(
        '@type' => $type,
      )) . ' ' . l($login_link_text, '/user', array(
        'query' => array(
          'destination' => current_path(),
        ),
      ));
    }

    // Allow others to alter this alter.
    drupal_alter('springboard_quick_donate_checkout_form', $form['submitted']['payment_information']['payment_fields'][$gateway_type], $form);
  }

  if (isset($_SESSION['springboard_hmac']['quickdonate'])) {
    $values = $_SESSION['springboard_hmac']['quickdonate'];

    $qd_did = isset($values[$mapping['donation_id']]) ? $values[$mapping['donation_id']] : FALSE;
    $qd = FALSE;
    if ($qd_did) {
      $qd = fundraiser_donation_get_donation($qd_did);
    }

    if ($qd && isset($form['submitted']['payment_information']['payment_method']['#options'][$qd->gateway['payment_method'][0]])) {
      $form['submitted']['payment_information']['payment_method']['#default_value'] = $qd->gateway['payment_method'][0];
    }

    if (isset($values[$mapping['amount']])) {
      $amount = $values[$mapping['amount']] / 100;
      $donation_field = &$form['submitted']['donation'];
      if (array_key_exists($amount, $donation_field['amount']['#options'])) {
        $donation_field['amount']['#default_value'] = $amount;
      }
      else {
        $donation_field['amount']['#default_value'] = 'other';
        $donation_field['other_amount']['#value'] = $amount;
      }
    }
    unset($_SESSION['springboard_hmac']['quickdonate']);
  }

  // Add submit handler.
  $form['#submit'][] = '_springboard_quick_donate_checkout_form_submit';

  return $form;
}

/**
 * Returns a user's quick donation default payment information if it exists.
 *
 * @param int $uid
 *   The user's ID.
 *
 * @return int
 *   The user's quick donation payment information.
 */
function springboard_quick_donate_get_payment_info_for_uid($uid) {
  $query = db_select('fundraiser_springboard_quick_donate_cardonfile', 'fsqdc')
    ->fields('fsqdc', array('card_id'))
    ->condition('uid', $uid, '=')
    ->execute();
  if (!$query->rowCount()) {
    return FALSE;
  }

  return $query->fetchField();
}

/**
 * Helper function to traverse a form array and set #states for the QD form.
 */
function _springboard_quick_donate_checkout_form_hide_payment_fields(&$element) {
  $children = element_get_visible_children($element);
  foreach ($children as $child) {
    if (!isset($element[$child]['#states'])) {
      $element[$child]['#states'] = array();
    }

    $element[$child]['#states']['visible'][':input[name$="[cardonfile]"]'] = array('value' => 'new');

    $grandchildren = element_get_visible_children($element[$child]);
    if (count($grandchildren)) {
      _springboard_quick_donate_checkout_form_hide_payment_fields($element[$child]);
    }
  }
}

/**
 * Implements hook_fundraiser_donation_submit().
 */
function springboard_quick_donate_fundraiser_donation_submit($form, $form_state, $donation) {
  $payment_info = $form_state['values']['submitted_tree']['payment_information'];
  $payment_fields = $payment_info['payment_fields'];
  if (isset($payment_fields['token']) && $payment_fields['token'] && isset($donation->data['cardonfile'])) {
    $donation->data['cardonfile'] = $payment_fields[$payment_info['payment_method']]['cardonfile'];
  }
}

/**
 * Implements hook_fundraiser_commerce_submit_handler_pane_values_alter().
 *
 * Sets the appropriate 'cardonfile' element to the card id value if set, which
 * is necessary for payment gateways to determine when to use cardonfile
 * functionality.
 */
function springboard_quick_donate_fundraiser_commerce_submit_handler_pane_values_alter(&$pane_values, &$donation) {
  if (isset($donation->data['cardonfile']) && $donation->data['cardonfile'] != 'new' && $donation->data['cardonfile'] > 0) {
    $pane_values['cardonfile'] = $donation->data['cardonfile'];
  }
}

/**
 * Submission handler for springboard_quick_donate_fundraiser_donation_form().
 */
function _springboard_quick_donate_checkout_form_submit($form, &$form_state) {
  if (empty($form_state['#donation'])) {
    return;
  }

  $values = &$form_state['values']['submitted_tree']['payment_information'];
  $method = $values['payment_method'];
  $payment_fields = $values['payment_fields'];
  $store_card = !empty($payment_fields[$method]['cardonfile_store']);

  // Exit if no card selection.
  if (!$store_card || empty($values['payment_fields'][$method]['cardonfile'])) {
    return;
  }

  $donation = $form_state['#donation'];
  $account = $donation->user;

  $card_id = 0;

  if (!empty($payment_fields[$method]['cardonfile_instance_default'])) {
    if ($payment_fields[$method]['cardonfile'] != 'new') {
      // Get card on file value.
      $card_id = intval($payment_fields[$method]['cardonfile']);
      // Submit actions for card selected.
      if (!empty($card_id)) {
        // Mark as default.
        commerce_cardonfile_set_default_card($card_id);
      }
    }
    else {
      $card_id = _springboard_quick_donate_users_latest_cardid($account->uid);
      commerce_cardonfile_set_default_card($card_id);
    }
  }

  // In the case that the card id is still set to 0, retrieve user's latest
  // card on file.
  if ($card_id == 0) {
    $card_id = _springboard_quick_donate_users_latest_cardid($account->uid);
    // If no card was found, return early.
    if ($card_id === FALSE) {
      return;
    }
  }

  db_merge('fundraiser_springboard_quick_donate_cardonfile')
    ->key(array('uid' => $account->uid))
    ->fields(array(
      'card_id' => $card_id,
      'optin_date' => time(),
      'uid' => $account->uid,
      'did' => $donation->did,
      'nid' => $donation->nid,
      'gateway' => $donation->gateway['id'],
    ))
    ->execute();

  if (empty($account->pass)) {
    // Assuming this user account was just created since the password is empty.
    drupal_mail('user', 'register_no_approval_required', $account->mail, LANGUAGE_NONE, array('account' => $account), NULL);
  }
}

/**
 * Implements hook_fundraiser_donation_validate_alter().
 *
 * Used to add a new array element 'token' if a tokenized payment method (like
 * cardonfile) is being used.
 */
function springboard_quick_donate_fundraiser_donation_validate_alter($form, &$form_state) {
  $payment_info = &$form_state['values']['submitted']['payment_information'];
  if (isset($payment_info['payment_fields'][$payment_info['payment_method']]['cardonfile']) && $payment_info['payment_fields'][$payment_info['payment_method']]['cardonfile'] != 'new') {
    $payment_info['payment_fields']['token'] = TRUE;
  }
}

/**
 * Helper function to retrieve the newest card id belonging to specific user.
 */
function _springboard_quick_donate_users_latest_cardid($uid = NULL) {
  if (empty($uid)) {
    global $user;
    $uid = $user->uid;
  }

  $query = db_select('commerce_cardonfile', 'cc')
    ->fields('cc', array('card_id'))
    ->condition('uid', $uid, '=')
    ->orderBy('card_id', 'DESC')
    ->range(0, 1)
    ->execute();
  if ($query->rowCount() == 0) {
    return FALSE;
  }

  return $query->fetchField();
}
