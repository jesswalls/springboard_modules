<?php
/**
 * @file
 * springboard_hmac hooks for Springboard Quick Donate.
 */

define('FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_UID_NOT_EQUAL_TOKEN', 0);
define('FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_USER_NOT_LOGGED_IN', 1);
define('FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_USER_NO_ACCESS', 2);
define('FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_PAYMENT_METHOD_UNAVAILABLE', 3);
define('FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_GATEWAY_UNAVAILABLE', 4);
define('FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_INVALID_NODE_TYPE', 5);

/**
 * Implements hook_menu().
 */
function fundraiser_quick_donate_springboard_hmac_menu() {
  $items = array();

  $items['admin/config/system/fundraiser/quick-donate/token-generator'] = array(
    'title' => 'Quick Donate Token Generator',
    'description' => 'Generate quick donate HMAC tokens for testing or use',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_quick_donate_springboard_hmac_token_generator'),
    'access arguments' => array('administer fundraiser quick_donate'),
    'file' => 'includes/fundraiser_quick_donate_springboard_hmac.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Create HMAC token link for quick donations.
 *
 * @param array $payload
 *   The payload values.
 *
 * @return string
 *   The quick donation url.
 */
function fundraiser_quick_donate_springboard_hmac_create_link($payload, $rollback = FALSE) {
  $link = '';

  $time = time() + (60 * 60 * 24 * 30);
  $values = array(
    $payload['uid'],
    $time,
    'qd',
    $payload['card_id'],
    $payload['gateway_id'],
  );

  $payload_string = implode('.', $values);

  $payload_string = base64_encode($payload_string);
  $key = springboard_hmac_get_key();
  $hmac = springboard_hmac_create_hmac($values, $key);

  $link = url('hmac/' . $payload_string . '/' . $hmac, array('absolute' => TRUE));

  return $link;
}

/**
 * Implements hook_springboard_hmac_allowed_actions().
 */
function fundraiser_quick_donate_springboard_hmac_springboard_hmac_allowed_actions_alter(&$actions) {
  $actions[] = 'qd';
}

/**
 * Implements hook_springboard_hmac_success().
 *
 * Redirect to the donation form if hmac validated.
 */
function fundraiser_quick_donate_springboard_hmac_springboard_hmac_success($payload) {
  if ($payload['action'] != 'qd') {
    return;
  }

  $nid = _fundraiser_quick_donate_springboard_hmac_get_nid($payload);
  // If the nid wasn't returned, it would throw an invokation of
  // `springboard_hmac_failure`, so return that.
  if (!is_numeric($nid)) {
    return $nid;
  }
  $node = node_load($nid);

  if (!fundraiser_is_donation_type($node->type)) {
    $_SESSION['springboard_hmac']['quickdonate'] = array(
      'status' => FALSE,
      'reason' => FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_INVALID_NODE_TYPE,
    );
    _fundraiser_quick_donate_springboard_hmac_redirect_to_default_node($nid);
  }

  if (empty($node->gateways)) {
    $_SESSION['springboard_hmac']['quickdonate'] = array(
      'status' => FALSE,
      'reason' => FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_GATEWAY_UNAVAILABLE,
    );
    _fundraiser_quick_donate_springboard_hmac_redirect_to_default_node($nid);
  }

  $mapping = _fundraiser_quick_donate_springboard_hmac_hmac_mapping();
  $gateway_id = $payload[$mapping['gateway_id']];
  if (!array_key_exists($gateway_id, $node->gateways) || !$node->gateways[$gateway_id]['status']) {
    $_SESSION['springboard_hmac']['quickdonate'] = array(
      'status' => FALSE,
      'reason' => FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_PAYMENT_METHOD_UNAVAILABLE,
    );
    _fundraiser_quick_donate_springboard_hmac_redirect_to_default_node($nid);
  }

  if (!node_access('view', $node)) {
    $_SESSION['springboard_hmac']['quickdonate'] = array(
      'status' => FALSE,
      'reason' => FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_USER_NO_ACCESS,
    );
    _fundraiser_quick_donate_springboard_hmac_redirect_to_default_node($nid);
  }

  $status = TRUE;
  // Need to do some more validation at this point since we don't want to show
  // an access denied message.
  if (!user_is_logged_in()) {
    $_SESSION['springboard_hmac']['quickdonate'] = array();
    $_SESSION['springboard_hmac']['quickdonate']['status'] = FALSE;
    $cookie = springboard_cookie_get_cookie();
    if (isset($cookie['uid']) && $cookie['uid'] != $payload[$mapping['uid']]) {
      // Set a flag to tell us later that uid authentication failed, so we can
      // set an appropriate message on the donation form.
      $_SESSION['springboard_hmac']['quickdonate']['reason'] = FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_UID_NOT_EQUAL_TOKEN;
    }
    else {
      $_SESSION['springboard_hmac']['quickdonate']['reason'] = FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_USER_NOT_LOGGED_IN;
    }
  }
  // Move quickdonate values into their own array for our own sanity.
  else {
    foreach ($mapping as $key) {
      $_SESSION['springboard_hmac']['quickdonate'][$key] = $payload[$key];
      unset($_SESSION['springboard_hmac'][$key]);
    }
  }

  drupal_goto('node/' . $nid);
}

/**
 * Return the node ID of the fundraiser for an HMAC token.
 *
 * If the ID is not available in the token, return the default for the gateway.
 * If the default is not available, return an error.
 *
 * @param array $payload
 *   The payload array.
 *
 * @return int|void
 *   The fundraiser ID or an invokation of `springboard_hmac_failure`.
 */
function _fundraiser_quick_donate_springboard_hmac_get_nid($payload) {
  $parameters = drupal_get_query_parameters();
  $mapping = _fundraiser_quick_donate_springboard_hmac_hmac_mapping();
  $gateway_id = $payload[$mapping['gateway_id']];
  $default_data = variable_get(FUNDRAISER_QUICK_DONATE_DEFAULT_FORM_PREFIX . $gateway_id, array());

  if (isset($parameters['form_id']) && is_numeric($parameters['form_id'])) {
    return $parameters['form_id'];
  }
  elseif (!empty($default_data)) {
    $default_data = unserialize($default_data);
    return $default_data['nid'];
  }

  // If no ID is available, call the following function to display an invalid
  // message.
  _fundraiser_quick_donate_springboard_hmac_redirect_to_default_node();
}

/**
 * Helper function to redirect to a node if $nid > 0.
 */
function _fundraiser_quick_donate_springboard_hmac_redirect_to_default_node($nid = 0) {
  if ($nid) {
    drupal_goto('node/' . $nid);
  }

  // @todo Should this be a 404 or access denied? Configurable?
  return drupal_deliver_page(MENU_NOT_FOUND);
}

/**
 * Implements hook_springboard_hmac_failure().
 *
 * Redirect to the donation form if hmac not validated.
 */
function fundraiser_quick_donate_springboard_hmac_failure($reason, $payload) {
  $mapping = _fundraiser_quick_donate_springboard_hmac_hmac_mapping();

  // If the Springboard cookie is set and matches the uid from the token,
  // redirect user to donation form. This scenario is treated as a success
  // condition.
  $cookie = springboard_cookie_get_cookie();
  $nid = _fundraiser_quick_donate_springboard_hmac_get_nid($payload);
  if (!empty($cookie['uid']) && $cookie['uid'] == $payload[$mapping['uid']]) {
    drupal_goto(drupal_get_path_alias('node/' . $nid));
  }

  // Otherwise this is a failure condition. Output the reason if configured to
  // do so.
  if (variable_get('fundraiser_quick_donate_debug', FALSE)) {
    drupal_set_message($reason, 'warning', FALSE);
  }

  // Redirect to the login form.
  drupal_session_start();
  $_SESSION['quickdonate'] = TRUE;

  drupal_goto('/user', array(
    'query' => array(
      'destination' => drupal_get_path_alias('node/' . $nid),
    ),
  ));
}

/**
 * Implements hook_springboard_hmac_verify_payload().
 */
function fundraiser_quick_donate_springboard_hmac_springboard_hmac_verify_payload($payload) {
  $mapping = _fundraiser_quick_donate_springboard_hmac_hmac_mapping();
  $card_id = $payload[$mapping['card_id']];
  $gateway_id = $payload[$mapping['gateway_id']];
  if (!isset($card_id) || !isset($gateway_id)) {
    return t('No card or gateway information available.');
  }

  // Since we want to have the ability of redirecting the user to a default form
  // most of the actual verification is done in the
  // `hook_springboard_hmac_success` hook.

  return NULL;
}

/**
 * Helper function to get a mapping of hmac values for quick donations.
 *
 * Needed since by default the array isn't mapped by key but instead by index.
 *
 * @return array
 *   A map of hmac types to their corresponding keys.
 */
function _fundraiser_quick_donate_springboard_hmac_hmac_mapping() {
  return array(
    'uid' => 'uid',
    'card_id' => 0,
    'gateway_id' => 1,
  );
}

/**
 * Implements hook_fundraiser_quick_donate_fundraiser_donation_form_alter().
 */
function fundraiser_quick_donate_springboard_hmac_fundraiser_quick_donate_fundraiser_donation_form_alter(&$form, &$form_state) {
  $mapping = _fundraiser_quick_donate_springboard_hmac_hmac_mapping();
  $hmac = !empty($_SESSION['springboard_hmac']['quickdonate']);
  global $user;
  // If the HMAC token is set, update user fields with values from token.
  if ($hmac) {
    $values = $_SESSION['springboard_hmac']['quickdonate'];
    // Update user fields.
    _fundraiser_quick_donate_springboard_hmac_update_user_fields_with_hmac_values($form, $form_state, $mapping, $values);
    // Update payment fields.
    _fundraiser_quick_donate_springboard_hmac_update_payment_fields_with_hmac_values($form, $form_state, $mapping, $values);
  }
}

/**
 * Helper function to set user field values with HMAC token values.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form_state array.
 * @param array $mapping
 *   The HMAC mapping.
 * @param array $values
 *   The HMAC values.
 */
function _fundraiser_quick_donate_springboard_hmac_update_user_fields_with_hmac_values(&$form, &$form_state, $mapping, $values) {
  global $user;
  if (isset($values['status']) && !$values['status']) {
    $reasons = array(
      // @todo Make the message configurable.
      FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_UID_NOT_EQUAL_TOKEN => t("Uh oh. It looks like we weren't able to verify your saved payment details. Please !login to access your stored card information, or complete the donation form below.", array(
        '!login' => l(t('login'), '/user', array(
          'query' => array(
            'destination' => current_path(),
          ),
        )),
      )),
    );
    // @todo Right now the messages are the same, need to check if they need to
    // be different.
    $reasons[FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_USER_NOT_LOGGED_IN] = $reasons[FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_USER_NO_ACCESS] = $reasons[FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_PAYMENT_METHOD_UNAVAILABLE] = $reasons[FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_GATEWAY_UNAVAILABLE] = $reasons[FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_INVALID_NODE_TYPE] = $reasons[FUNDRAISER_QUICK_DONATE_SPRINGBOARD_HMAC_UID_NOT_EQUAL_TOKEN];
    $form['#prefix'] = $reasons[$values['reason']];
  }
  else {
    // If the user isn't logged in but is coming from an HMAC token URL, load
    // the user with the uid provided in the HMAC token.
    if ($user->uid == 0 && !empty($_SESSION['springboard_hmac']['quickdonate']['uid'])) {
      $user = user_load($_SESSION['springboard_hmac']['quickdonate']['uid']);

      // Update the user-related form elements to match the UID.
      $form['details']['uid']['#value'] = $_SESSION['springboard_hmac']['quickdonate']['uid'];

      $donor_info = &$form['submitted']['donor_information'];
      if (isset($user->sbp_first_name[LANGUAGE_NONE][0]['value'])) {
        $donor_info['first_name']['#default_value'] = $user->sbp_first_name[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->sbp_last_name[LANGUAGE_NONE][0]['value'])) {
        $donor_info['last_name']['#default_value'] = $user->sbp_last_name[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->mail)) {
        $donor_info['mail']['#default_value'] = $user->mail;
      }

      $billing_info = &$form['submitted']['billing_information'];
      if (isset($user->sbp_address[LANGUAGE_NONE][0]['value'])) {
        $billing_info['address']['#default_value'] = $user->sbp_address[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->sbp_address_line_2[LANGUAGE_NONE][0]['value'])) {
        $billing_info['address_line_2']['#default_value'] = $user->sbp_address_line_2[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->sbp_city[LANGUAGE_NONE][0]['value'])) {
        $billing_info['city']['#default_value'] = $user->sbp_city[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->sbp_state[LANGUAGE_NONE][0]['value'])) {
        $billing_info['state']['#default_value'] = $user->sbp_state[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->sbp_country[LANGUAGE_NONE][0]['value'])) {
        $billing_info['country']['#default_value'] = $user->sbp_country[LANGUAGE_NONE][0]['value'];
      }
      if (isset($user->sbp_zip[LANGUAGE_NONE][0]['value'])) {
        $billing_info['zip']['#default_value'] = $user->sbp_zip[LANGUAGE_NONE][0]['value'];
      }
    }
  }
}

/**
 * Helper function to set payment field values with HMAC token values.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form_state array.
 * @param array $mapping
 *   The HMAC mapping.
 * @param array $values
 *   The HMAC values.
 */
function _fundraiser_quick_donate_springboard_hmac_update_payment_fields_with_hmac_values(&$form, &$form_state, $mapping, $values) {
  if (!isset($values[$mapping['gateway_id']])) {
    return;
  }

  $gateway_id = $values[$mapping['gateway_id']];
  if (isset($form['submitted']['payment_information']['payment_method']['#options'][$gateway_id])) {
    $form['submitted']['payment_information']['payment_method']['#default_value'] = $gateway_id;
  }
}

/**
 * Impl. hook_fundraiser_quick_donate_fundraiser_donation_form_user_alter().
 */
function fundraiser_quick_donate_springboard_hmac_fundraiser_quick_donate_fundraiser_donation_form_user(&$user) {
  $mapping = _fundraiser_quick_donate_springboard_hmac_hmac_mapping();
  if (isset($_SESSION['springboard_hmac']['quickdonate'][$mapping['uid']])) {
    $user = user_load($_SESSION['springboard_hmac']['quickdonate'][$mapping['uid']]);
  }
}

/**
 * Implements hook_webform_user_save_profile_map_alter().
 */
function fundraiser_quick_donate_springboard_hmac_webform_user_save_profile_map_alter(&$account, $form, $form_state) {
  if (isset($_SESSION['springboard_hmac']['quickdonate'])) {
    $mapping = _fundraiser_quick_donate_springboard_hmac_hmac_mapping();
    $account->sbp_ms = $_SESSION['springboard_hmac']['quickdonate'][$mapping['ms']];
  }
}
